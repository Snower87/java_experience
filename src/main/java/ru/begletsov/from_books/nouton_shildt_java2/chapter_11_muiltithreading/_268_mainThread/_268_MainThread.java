package ru.begletsov.from_books.nouton_shildt_java2.chapter_11_muiltithreading._268_mainThread;

public class _268_MainThread {
    public static void main(String[] args) {
        //Когда Java-программа запускается, один поток начинает выполняться немедленно. Он обычно называется главным потоком,
        //потому что выполняется в начале программы. Главный поток важен по 2м причинам:
        //1) это поток, из которого будут порождены все другие дочерние потоки
        //2) это должен быть последний поток, в котором заканчивается выполнение. Когда главный поток останавливается, программа завершается.

        //Хотя главный поток создается автоматически после запуска программы, он может управляться через Thread-объект.
        //Для огранизации управления нужно получить ссылку на него, вызывая метод currentThread(). Его форма:
        //static Thread currentThread()
        //Этот метод возвращает ссылку на поток, в котором он вызывается. Как только вы получаете ссылку на поток,
        //в котором он вызывается, то вы можете им управлять как и любым другим потоком.

        //ссылка на текущий поток (главный в данном случае) получена с помощью вызова currentThread() и сохранена в переменной t
        Thread t = Thread.currentThread();

        System.out.println("текущий поток: " + t);

        //изменить имя потока
        t.setName("My like thread");
        System.out.println("После изменения имени: " + t);

        try {
            for (int n = 5; n > 0; n--) {
                System.out.println(n);
                Thread.sleep(1000);
                //Метод sleep() заставляет поток, из которого он вызывается, приостановить выполнение на некоторое время
            }
        } catch (InterruptedException e) {
            System.out.println("Главный поток завершен");
            e.printStackTrace();
        }
    }
}
